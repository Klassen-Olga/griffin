<!--<!DOCTYPE html>
<html>
<head>
    <title>Duplex</title>
    <meta charset="UTF-8" />
    <link href="/styles.css" rel="stylesheet">
</head>


<body>
<video id="selfStream" playsinline autoplay muted></video>
<button onclick="stream()">Stream</button><br>
<button onclick="unmute()" id="enable-audio">Enable audio</button><br>
<video id="foreignStream" playsinline autoplay muted></video>
<script src="/socket.io/socket.io.js"></script>
</body>
</html>
<script>

	const peerConnections = {};
	const config = {
		iceServers: [
			{
				urls: ["stun:stun.l.google.com:19302"]
			}
		]
	};
	// Media contrains
	const constraints = {
		video: { facingMode: "user" },
		audio: true,
	};
	const socket = io.connect(window.location.origin);
	const videoB = document.getElementById("selfStream");
	function stream() {
		console.log(JSON.stringify(navigator.mediaDevices));
		//take stream of my video, show it on my screen, emit broadcaster
		navigator.mediaDevices.getUserMedia(constraints)
			.then(stream => {
				videoB.srcObject = stream;
				socket.emit("broadcaster");
			})
			.catch(error => console.error(error));
	}

	//if watcher is emitted
	socket.on("watcher", id => {
		console.log("clientwATCHER");

		//create peer connection
		const peerConnection = new RTCPeerConnection(config);
		peerConnections[id] = peerConnection;
		let stream = videoB.srcObject;

		stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));
		peerConnection.onicecandidate = event => {
			console.log("kukuWatcher");
			console.log("kukuWatcher");
			if (event.candidate) {
				socket.emit("candidateOfW", id, event.candidate);
			}
		};

		//create session description and send it to watcher
		peerConnection
			.createOffer()
			.then(sdp => peerConnection.setLocalDescription(sdp))
			.then(() => {
				socket.emit("offer", id, peerConnection.localDescription);
			});
	});

	socket.on("answer", (id, description) => {
		peerConnections[id].setRemoteDescription(description);
	});

	socket.on("candidateOfB", (id, candidate) => {
		peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));
	});
	socket.on("disconnectPeer", id => {
		peerConnections[id].close();
		delete peerConnections[id];
	});

	window.onunload = window.onbeforeunload = () => {
		socket.close();
	}

	//watcher

	function unmute() {
		console.log("Enabling audio")
		videoB.muted = false;
	}
	let peerConnection;


	const videoW = document.getElementById("foreignStream");
	function unmute() {
		console.log("Enabling audio")
		videoW.muted = false;
	}
	socket.on("offer", (id, description) => {
		peerConnection = new RTCPeerConnection(config);
		peerConnection
			.setRemoteDescription(description)
			.then(() => peerConnection.createAnswer())
			.then(sdp => peerConnection.setLocalDescription(sdp))
			.then(() => {
				socket.emit("answer", id, peerConnection.localDescription);
			});
		peerConnection.ontrack = event => {
			videoW.srcObject = event.streams[0];
		};
		peerConnection.onicecandidate = event => {
			console.log("kukuBr");
			console.log("kuku");
			if (event.candidate) {
				socket.emit("candidateOfB", id, event.candidate);
			}
		};
	});

	socket.on("candidateOfW", (id, candidate) => {
		peerConnection
			.addIceCandidate(new RTCIceCandidate(candidate))
			.catch(e => console.error(e));
	});

	socket.on("connect", () => {
		socket.emit("watcher");
	});

	socket.on("broadcaster", () => {
		console.log("trololo");
		socket.emit("watcher");
	});

	socket.on("disconnectPeer", () => {
		peerConnection.close();
	});

	window.onunload = window.onbeforeunload = () => {
		socket.close();
	};


</script>-->
<!DOCTYPE html>
<html>
<head>
    <title>Duplex</title>
    <meta charset="UTF-8"/>
    <link href="/styles.css" rel="stylesheet">
</head>


<body>
<video id="selfStream" playsinline autoplay muted></video>
<button onclick="stream()">Stream</button>
<br>
<button onclick="unmute()" id="enable-audio">Enable audio</button>
<br>
<video id="foreignStream" playsinline autoplay muted></video>
<script src="/socket.io/socket.io.js"></script>
</body>
</html>
<script>

	const peerConnections = {};

	const config = {
		iceServers: [
			{
				urls: ["stun:stun.l.google.com:19302"]
			}
		]
	};
	// Media contrains
	const constraints = {
		video: {facingMode: "user"},
		audio: true,
	};
	const socket = io.connect(window.location.origin);
	const videoB = document.getElementById("selfStream");

	//take stream of my video, show it on my screen, emit broadcaster
	navigator.mediaDevices.getUserMedia(constraints)
		.then(stream => {
			videoB.srcObject = stream;
			socket.emit("broadcaster");
		})
		.catch(error => console.error(error));


	//if watcher is emitted
	socket.on("watcher", watcherId => {
		console.log("clientwATCHER");

		//create peer connection
		const peerConnection = new RTCPeerConnection(config);
		//save watcher id and broadcaster connection
		peerConnections[watcherId] = peerConnection;
		//take proper stream
		let stream = videoB.srcObject;

		//add to it video and audio
		stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));
		//put listener to save broadcaster info to watcher
		peerConnection.onicecandidate = event => {
			if (event.candidate) {
				socket.emit("candidate", watcherId, event.candidate);
			}
		};

		//create session description and send it to watcher
		peerConnection
			.createOffer()
			.then(sdp => peerConnection.setLocalDescription(sdp))
			.then(() => {
				socket.emit("offer", watcherId, peerConnection.localDescription);
			});
	});

	socket.on("answer", (id, description) => {
		peerConnections[id].setRemoteDescription(description);
	});


	socket.on("disconnectPeer", id => {
		peerConnections[id].close();
	});

	window.onunload = window.onbeforeunload = () => {
		socket.close();
	}

	//watcher

	function unmute() {
		console.log("Enabling audio")
		videoB.muted = false;
	}


	const videoW = document.getElementById("foreignStream");


	//watcher saves broadcaster
	socket.on("offer", (watcherId, description, broadcasterId) => {
		//creates new connection
		const peerConnection = new RTCPeerConnection(config);
		peerConnections[broadcasterId]=peerConnection;
		//creates candidate(info of watcher info) for all broadcaster and send it to them
		peerConnection
			.setRemoteDescription(description)
			.then(() => peerConnection.createAnswer())
			.then(sdp => peerConnection.setLocalDescription(sdp))
			.then(() => {
				socket.emit("answer", watcherId, peerConnection.localDescription);
			});
		peerConnection.ontrack = event => {
			videoW.srcObject = event.streams[0];
		};
		peerConnection.onicecandidate = event => {
			if (event.candidate) {
				socket.emit("candidate", watcherId, event.candidate);
			}
		};
	});
    //save broadcaster info to watcher
	socket.on("candidate", (watcherId, candidate) => {
		peerConnections[watcherId]
			.addIceCandidate(new RTCIceCandidate(candidate))
			.catch(e => console.error(e));
		console.log(JSON.stringify(peerConnections));
		console.log(Object.keys(peerConnections).length);

	});

	socket.on("connect", () => {
		socket.emit("watcher");
	});

	socket.on("broadcaster", () => {
		socket.emit("watcher");
	});


	window.onunload = window.onbeforeunload = () => {
		socket.close();
	};


</script>
