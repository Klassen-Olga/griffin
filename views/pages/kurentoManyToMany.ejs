<!--
<!DOCTYPE html>
<html>

<head>
    <title>WebRTC Video Conference Tutorial - Media Server</title>
    <style>
        #meetingRoom div {
            text-align: center;
        }

        .videoContainer {
            float: left;
        }

        #meetingRoom:after {
            content: '';
            display: block;
            clear: both;
        }
    </style>
</head>

<body>
<h1>WebRTC Video Conference Tutorial - Media Server</h1>


<button id="register">Enter</button>

<div id="meetingRoom" style="display: block">
</div>

<script src="script/adapter.js"></script>
<script src="script/kurento-utils.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
</body>
</html>
<script>
	// getting dom elements
	var divMeetingRoom = document.getElementById('meetingRoom');

	var btnRegister = document.getElementById('register');

	// variables
	var roomName = 'o';
	var userName = 'o';
	//list of call partivipans
	var participants = {};

	// Let's do this
	var socket = io();

	btnRegister.onclick = function () {
	}
	socket.emit('joinRoom');

	// messages handlers
	socket.on('message', message => {

		switch (message.event) {

			case 'candidate':
				addIceCandidate(message.userid, message.candidate);
				break;
		}
	});
	socket.on('newParticipantArrived', userid => {
		receiveVideo(userid);
	})
    socket.on('receiveVideoAnswer', (answer, userid)=>{
	    participants[userid].rtcPeer.processAnswer(answer);

    });
	socket.on('existingParticipants', (existingUsers, userid) => {
		var video = document.createElement('video');
		var div = document.createElement('div');
		div.className = "videoContainer";
		var name = document.createElement('div');
		video.id = userid;
		video.autoplay = true;
		div.appendChild(video);
		div.appendChild(name);
		divMeetingRoom.appendChild(div);

		var user = {
			id: userid,
			video: video,
			rtcPeer: null
		}

		participants[user.id] = user;

		var constraints = {
			audio: true,
			video: {
				mandatory: {
					maxWidth: 320,
					maxFrameRate: 15,
					minFrameRate: 15
				}
			}
		};

		var options = {
			localVideo: video,
			mediaConstraints: constraints,
			onicecandidate: onIceCandidate
		}

		user.rtcPeer = kurentoUtils.WebRtcPeer.WebRtcPeerSendonly(options,
			function (err) {
				if (err) {
					return console.error(err);
				}
				this.generateOffer(onOffer)
			}
		);

		existingUsers.forEach(function (element) {
			receiveVideo(element.id, element.name);
		});

		var onOffer = function (err, offer, wp) {
			socket.emit('receiveVideoFrom', user.id, offer);
		}



		function onIceCandidate(candidate, wp) {
			console.log("On WebRtc existing participants candidate" + user.id);
			var message = {
				event: 'candidate',
				userid: user.id,
				roomName: roomName,
				candidate: candidate
			}
			sendMessage(message);
		}
	})

	function receiveVideo(userid) {
		var video = document.createElement('video');
		var div = document.createElement('div');
		div.className = "videoContainer";
		var name = document.createElement('div');
		video.id = userid;
		video.autoplay = true;
		div.appendChild(video);
		div.appendChild(name);
		divMeetingRoom.appendChild(div);

		var user = {
			id: userid,
			video: video,
			rtcPeer: null
		}

		participants[user.id] = user;

		var options = {
			remoteVideo: video,
			onicecandidate: onIceCandidate
		}


		user.rtcPeer = kurentoUtils.WebRtcPeer.WebRtcPeerRecvonly(options,
			function (err) {
				if (err) {
					return console.error(err);
				}
				this.generateOffer(onOffer);
			}
		);


		var onOffer = function (err, offer, wp) {
			socket.emit('receiveVideoFrom', user.id, offer);
		}

		function onIceCandidate(candidate, wp) {
			console.log("On receive video candidate" + userid);

			var message = {
				event: 'candidate',
				userid: user.id,
				roomName: roomName,
				candidate: candidate
			}
			sendMessage(message);
		}
	}


	function addIceCandidate(userid, candidate) {
		console.log('Signaling  candidate'+ userid);
		participants[userid].rtcPeer.addIceCandidate(candidate);
	}

	// utilities
	function sendMessage(message) {
		socket.emit('message', message);
	}

</script>-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Kurento Group Call Node</title>
</head>

<body>

<div id="container">
    <div id="wrapper">
        <div id="join" class="animate join">
            <h1>Join a Room</h1>
            <form onsubmit="register(); return false;" accept-charset="UTF-8">
                <p>
                    <input type="text" name="name" value="" id="name"
                           placeholder="Username" required>
                </p>
                <p>
                    <input type="text" name="room" value="" id="roomName"
                           placeholder="Room" required>
                </p>
                <p class="submit">
                    <input type="submit" name="commit" value="Join!">
                </p>
            </form>
        </div>
        <div id="room" style="display: none;">
            <h2 id="room-header"></h2>
            <div id="participants"></div>
            <input type="button" id="button-leave" onmouseup="leaveRoom();"
                   value="Leave room">
        </div>
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>

<script src="script/adapter.js"></script>
<script src="script/kurento-utils.min.js"></script>
<script src="./script/index.js"></script>
<script src="./script/participants.js"></script>


</body>
</html>