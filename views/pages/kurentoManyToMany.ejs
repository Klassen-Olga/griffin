<!--
<html>
<body>
<h2>Local video playback</h2>
Name: <input type="text" id="name"/>
<video style=" margin:auto;display: block; width: 40%" id="localVideo" autoplay playsinline></video>
<div id="remoteVideos"></div>
<button onclick="start()">Start</button>
<button onclick="stop()">Stop</button>
</body>
</html>
<script src="script/kurento-utils.min.js"></script>
<script src="http://localhost:3000/socket.io/socket.io.js"></script>
<script>
	var socket = io('http://localhost:3000');
	socket.on('connection', ()=>{
		console.log("Id+ "+socket.id);

	})
	var webRtcPeer = null;
	var participants = {};
	var localVideo = document.getElementById('localVideo');
	var remoteVideo = document.getElementById('remoteVideo');

	function start() {
		socket.emit('joinRoom');
	}

	// each existing participant registers new user in receive mode only
	socket.on('newParticipant', (newParticipantId) => {

		receiveVideo(newParticipantId);

	});
	// new user registers each existing participant
	socket.on('existingParticipants', (userId, existingUsers) => {
		var constraints = {
			audio: true,
			video: {
				mandatory: {
					maxWidth: 320,
					maxFrameRate: 15,
					minFrameRate: 15
				}
			}
		};
		var user = {
			id: userId,
			video: localVideo,
			webRtcPeer: null
		}
		participants[userId] = user;

		var options = {
			localVideo: localVideo,
			mediaConstraints: constraints,
			onicecandidate: onIceCandidate
		}
		user.webRtcPeer = kurentoUtils.WebRtcPeer.WebRtcPeerSendonly(options, function (error) {

			this.generateOffer((error, offerSdp) => {
				socket.emit('offer', offerSdp, user.id);

			});
		});
		existingUsers.forEach(function (element) {
			receiveVideo(element.id);
		})
		function onIceCandidate(candidate) {
			console.log('Local candidate' + JSON.stringify(candidate));

			socket.emit('candidate', candidate, user.id);
		}

	});
	socket.on('candidate', (candidate, userIdFrom) => {
		participants[userIdFrom].webRtcPeer.addIceCandidate(candidate);
	});
	socket.on('answer', (answer, userId) => {
		participants[userId].webRtcPeer.processAnswer(answer);
		console.log("Answer from"+userId);
	})

	function receiveVideo(newParticipantId) {
		var video = document.createElement('video');
		var remoteVideosDiv = document.getElementById('remoteVideos');
		video.id = newParticipantId;
		video.setAttribute("autoplay", true);
		video.setAttribute("playsinline", true);
		video.setAttribute("controls", false);
		remoteVideosDiv.appendChild(video);

		var options = {
			remoteVideo: video,
			onicecandidate: onIceCandidate
		}
		var user = {
			id: newParticipantId,
			video: video,
			webRtcPeer: null
		}
		participants[user.id] = user;

		user.webRtcPeer = kurentoUtils.WebRtcPeer.WebRtcPeerRecvonly(options, function (err) {
			if (err) {
				return console.error(err);
			}
			//  prepare an offer to begin with the signaling process
			this.generateOffer((error, offerSdp) => {

				socket.emit('offer', offerSdp, user.id);

			});
		})
		function onIceCandidate(candidate) {
			console.log('Local candidate' + JSON.stringify(candidate));

			socket.emit('candidate', candidate, user.id);
		}
	}


</script>-->
<!DOCTYPE html>
<html>

<head>
    <title>WebRTC Video Conference Tutorial - Media Server</title>
    <style>
        #meetingRoom div {
            text-align: center;
        }

        .videoContainer {
            float: left;
        }

        #meetingRoom:after {
            content: '';
            display: block;
            clear: both;
        }
    </style>
</head>

<body>
<h1>WebRTC Video Conference Tutorial - Media Server</h1>


<button id="register">Enter</button>

<div id="meetingRoom" style="display: block">
</div>

<script src="script/adapter.js"></script>
<script src="script/kurento-utils.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
</body>
</html>
<script>
	// getting dom elements
	var divMeetingRoom = document.getElementById('meetingRoom');

	var btnRegister = document.getElementById('register');

	// variables
	var roomName = 'o';
	var userName = 'o';
	//list of call partivipans
	var participants = {};

	// Let's do this
	var socket = io();

	btnRegister.onclick = function () {
	}
	socket.emit('joinRoom');

	// messages handlers
	socket.on('message', message => {

		switch (message.event) {

			case 'candidate':
				addIceCandidate(message.userid, message.candidate);
				break;
		}
	});
	socket.on('newParticipantArrived', userid => {
		receiveVideo(userid);
	})
    socket.on('receiveVideoAnswer', (answer, userid)=>{
	    participants[userid].rtcPeer.processAnswer(answer);

    });
	socket.on('existingParticipants', (existingUsers, userid) => {
		var video = document.createElement('video');
		var div = document.createElement('div');
		div.className = "videoContainer";
		var name = document.createElement('div');
		video.id = userid;
		video.autoplay = true;
		div.appendChild(video);
		div.appendChild(name);
		divMeetingRoom.appendChild(div);

		var user = {
			id: userid,
			video: video,
			rtcPeer: null
		}

		participants[user.id] = user;

		var constraints = {
			audio: true,
			video: {
				mandatory: {
					maxWidth: 320,
					maxFrameRate: 15,
					minFrameRate: 15
				}
			}
		};

		var options = {
			localVideo: video,
			mediaConstraints: constraints,
			onicecandidate: onIceCandidate
		}

		user.rtcPeer = kurentoUtils.WebRtcPeer.WebRtcPeerSendonly(options,
			function (err) {
				if (err) {
					return console.error(err);
				}
				this.generateOffer(onOffer)
			}
		);

		existingUsers.forEach(function (element) {
			receiveVideo(element.id, element.name);
		});

		var onOffer = function (err, offer, wp) {
			socket.emit('receiveVideoFrom', user.id, offer);
		}



		function onIceCandidate(candidate, wp) {
			console.log('sending ice candidates');
			var message = {
				event: 'candidate',
				userid: user.id,
				roomName: roomName,
				candidate: candidate
			}
			sendMessage(message);
		}
	})

	function receiveVideo(userid) {
		var video = document.createElement('video');
		var div = document.createElement('div');
		div.className = "videoContainer";
		var name = document.createElement('div');
		video.id = userid;
		video.autoplay = true;
		div.appendChild(video);
		div.appendChild(name);
		divMeetingRoom.appendChild(div);

		var user = {
			id: userid,
			video: video,
			rtcPeer: null
		}

		participants[user.id] = user;

		var options = {
			remoteVideo: video,
			onicecandidate: onIceCandidate
		}


		user.rtcPeer = kurentoUtils.WebRtcPeer.WebRtcPeerRecvonly(options,
			function (err) {
				if (err) {
					return console.error(err);
				}
				this.generateOffer(onOffer);
			}
		);


		var onOffer = function (err, offer, wp) {
			socket.emit('receiveVideoFrom', user.id, offer);
		}

		function onIceCandidate(candidate, wp) {
			console.log('sending ice candidates');
			var message = {
				event: 'candidate',
				userid: user.id,
				roomName: roomName,
				candidate: candidate
			}
			sendMessage(message);
		}
	}


	function addIceCandidate(userid, candidate) {
		console.log(userid);
		participants[userid].rtcPeer.addIceCandidate(candidate);
	}

	// utilities
	function sendMessage(message) {
		console.log('sending ' + message.event + ' message to server');
		socket.emit('message', message);
	}

</script>