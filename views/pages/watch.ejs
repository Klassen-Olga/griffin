<!-- contains a single video view that will display the video stream from the broadcaster.
 It also imports the socket.io dependency and our watch.js file -->
<!DOCTYPE html>
<html>
<head>
	<title>Viewer</title>
	<meta charset="UTF-8"/>
	<link href="/styles.css" rel="stylesheet">
</head>

<body>
<!-- playsline- vido will be played on that place where is the video window

-->
<!-- autoplay - will be played whet it is ready-->
<video id="myVideo" playsinline muted autoplay></video>
<button onclick="unmute()" id="enable-audio">Enable audio</button>

<script src="/socket.io/socket.io.js"></script>
<script>
/*
	document.getElementById("myVideo").autoplay = "autoplay";
*/

	function unmute() {
		console.log("Enabling audio")
		video.muted = false;
	}
	let peerConnection;
	const config = {
		iceServers: [
			{
				urls: ["stun:stun.l.google.com:19302"]
			}
		]
	};

	const socket = io.connect(window.location.origin);

	const video = document.querySelector("video");

	socket.on("offer", (id, description) => {
		peerConnection = new RTCPeerConnection(config);
		peerConnection
				.setRemoteDescription(description)
				.then(() => peerConnection.createAnswer())
				.then(sdp => peerConnection.setLocalDescription(sdp))
				.then(() => {
					socket.emit("answer", id, peerConnection.localDescription);
				});
		peerConnection.ontrack = event => {
			video.srcObject = event.streams[0];
		};
		peerConnection.onicecandidate = event => {
			if (event.candidate) {
				socket.emit("candidate", id, event.candidate);
			}
		};
	});

	socket.on("candidate", (id, candidate) => {
		peerConnection
				.addIceCandidate(new RTCIceCandidate(candidate))
				.catch(e => console.error(e));
	});

	socket.on("connect", () => {
		socket.emit("watcher");
	});

	socket.on("broadcaster", () => {
		socket.emit("watcher");
	});

	socket.on("disconnectPeer", () => {
		peerConnection.close();
	});

	window.onunload = window.onbeforeunload = () => {
		socket.close();
	};


</script>
</body>
</html>


<!--<!DOCTYPE html>
<html>
<head>
	<title>Viewer</title>
	<meta charset="UTF-8" />
	<link href="/styles.css" rel="stylesheet" />
</head>
<body>
<video playsinline autoplay muted></video>
<button id="enable-audio">Enable audio</button>
<script src="/socket.io/socket.io.js"></script>
<script>
	let peerConnection;
	const config = {
		iceServers: [
			{
				"urls": "stun:stun.l.google.com:19302",
			},
			// {
			//   "urls": "turn:TURN_IP?transport=tcp",
			//   "username": "TURN_USERNAME",
			//   "credential": "TURN_CREDENTIALS"
			// }
		]
	};

	const socket = io.connect(window.location.origin);
	const video = document.querySelector("video");
	const enableAudioButton = document.querySelector("#enable-audio");

	enableAudioButton.addEventListener("click", enableAudio)

	socket.on("offer", (id, description) => {
		peerConnection = new RTCPeerConnection(config);
		peerConnection
				.setRemoteDescription(description)
				.then(() => peerConnection.createAnswer())
				.then(sdp => peerConnection.setLocalDescription(sdp))
				.then(() => {
					socket.emit("answer", id, peerConnection.localDescription);
				});
		peerConnection.ontrack = event => {
			video.srcObject = event.streams[0];
		};
		peerConnection.onicecandidate = event => {
			if (event.candidate) {
				socket.emit("candidate", id, event.candidate);
			}
		};
	});


	socket.on("candidate", (id, candidate) => {
		peerConnection
				.addIceCandidate(new RTCIceCandidate(candidate))
				.catch(e => console.error(e));
	});

	socket.on("connect", () => {
		socket.emit("watcher");
	});

	socket.on("broadcaster", () => {
		socket.emit("watcher");
	});

	socket.on("disconnectPeer", () => {
		peerConnection.close();
	});

	window.onunload = window.onbeforeunload = () => {
		socket.close();
	};

	function enableAudio() {
		console.log("Enabling audio")
		video.muted = false;
	}
</script>
</body>
</html>-->
